Varnish Glue
============

This is the glue intended to make it easier to deploy varnish. It provides
a simple set of scripts to enable/disable VCL snippets, and outlines a
rough pattern for how to work.

It also provides a handful of common, but disabled VCL snippets that you
can chose to enable.

It works as such:

``default.vcl`` should not require changes. It is a top-level script only
intended to set up a universal working environment.

``auto-includes.vcl`` is auto-generated by ``bin/update-includes``. It
includes all files in ``conf-enabled/`` and ``sites-enabled/``. First conf,
then sites, both in alphabetical order.

You put all non-site-specific VCL in ``conf-available/`` and enable it with
``bin/varnish-conf-enable``. This will create a symlink to
``conf-enabled/``.

You put all site-specific VCL in ``sites-available/<site>.vcl`` and
similarly enable it vin ``bin/varnish-site-enable``.

At the end of the day, you'll get to run ``bin/varnish-update-includes``
because Varnish doesn't allow wildcard-inclusion. In the future, this will
be an automated process of course. But we live in the present.

Practical examples
==================

Three snippets are included, two of which illustrates a dependency-problem,
but disregard that.

acmetool.vcl
------------

This snippet provides all the integration needed to make 'acmetool' work.
Simply enable it and chose the 'haproxy' method and varnish will allow you
to get domains verified.

hitch.vcl
---------

Hitch is the TLS terminator of choice for Varnish. You do not need any tool
to use it, but this provides a little bit of glue to detect that requests
are arriving unencrypted and need to be redirected. You do not NEED this
snippet, but you probably WANT it.

redirect.vcl
------------

This is a generic redirect-VCL. It is used by hitch.vcl, but can be used by
others too. It allows you to issue HTTP 301/302 redirects from `vcl_recv`.


